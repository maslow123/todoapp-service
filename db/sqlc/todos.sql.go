// Code generated by sqlc. DO NOT EDIT.
// source: todos.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    category_id,
    user_id,
    title,
    content
) VALUES (
    $1, $2, $3, $4
) RETURNING id, category_id, user_id, title, content, created_at, updated_at
`

type CreateTodoParams struct {
	CategoryID int32  `json:"category_id"`
	UserID     int32  `json:"user_id"`
	Title      string `json:"title"`
	Content    string `json:"content"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.CategoryID,
		arg.UserID,
		arg.Title,
		arg.Content,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const listTodoByUser = `-- name: ListTodoByUser :many
SELECT
    t.category_id, t.user_id, t.title, t.content, t.created_at, t.updated_at,
    c.name as category_name, c.color as category_color
FROM todos t
LEFT JOIN categories c
    ON c.id = t.category_id
WHERE user_id = $1

ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type ListTodoByUserParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListTodoByUserRow struct {
	CategoryID    int32          `json:"category_id"`
	UserID        int32          `json:"user_id"`
	Title         string         `json:"title"`
	Content       string         `json:"content"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	CategoryName  sql.NullString `json:"category_name"`
	CategoryColor sql.NullString `json:"category_color"`
}

func (q *Queries) ListTodoByUser(ctx context.Context, arg ListTodoByUserParams) ([]ListTodoByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listTodoByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTodoByUserRow{}
	for rows.Next() {
		var i ListTodoByUserRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryName,
			&i.CategoryColor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoByUser = `-- name: UpdateTodoByUser :one
UPDATE todos
SET category_id = $2, user_id = $3, title = $4, content = $5, updated_at = now()
WHERE id = $1
RETURNING id, category_id, user_id, title, content, created_at, updated_at
`

type UpdateTodoByUserParams struct {
	ID         int32  `json:"id"`
	CategoryID int32  `json:"category_id"`
	UserID     int32  `json:"user_id"`
	Title      string `json:"title"`
	Content    string `json:"content"`
}

func (q *Queries) UpdateTodoByUser(ctx context.Context, arg UpdateTodoByUserParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoByUser,
		arg.ID,
		arg.CategoryID,
		arg.UserID,
		arg.Title,
		arg.Content,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// source: todos.sql

package db

import (
	"context"
	"time"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    category_id,
    user_email,
    title,
    content,
    date,
    color,
    is_priority
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, category_id, title, content, created_at, updated_at, user_email, color, date, is_priority, status
`

type CreateTodoParams struct {
	CategoryID int32     `json:"category_id"`
	UserEmail  string    `json:"user_email"`
	Title      string    `json:"title"`
	Content    string    `json:"content"`
	Date       time.Time `json:"date"`
	Color      string    `json:"color"`
	IsPriority bool      `json:"is_priority"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.CategoryID,
		arg.UserEmail,
		arg.Title,
		arg.Content,
		arg.Date,
		arg.Color,
		arg.IsPriority,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserEmail,
		&i.Color,
		&i.Date,
		&i.IsPriority,
		&i.Status,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT
    t.id, t.category_id, t.user_email, t.title, t.content, t.created_at, t.updated_at, t.date, t.color, t.is_priority,
    c.name as category_name
FROM todos t
INNER JOIN categories c
    ON c.id = t.category_id
WHERE t.id = $1 LIMIT 1
FOR NO KEY UPDATE
`

type GetTodoRow struct {
	ID           int32     `json:"id"`
	CategoryID   int32     `json:"category_id"`
	UserEmail    string    `json:"user_email"`
	Title        string    `json:"title"`
	Content      string    `json:"content"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	Date         time.Time `json:"date"`
	Color        string    `json:"color"`
	IsPriority   bool      `json:"is_priority"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) GetTodo(ctx context.Context, id int32) (GetTodoRow, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i GetTodoRow
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.UserEmail,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Date,
		&i.Color,
		&i.IsPriority,
		&i.CategoryName,
	)
	return i, err
}

const listDoneTodo = `-- name: ListDoneTodo :many
SELECT
    t.id, t.category_id, t.user_email, t.title, t.content, t.created_at, t.updated_at, t.date, t.color, t.is_priority, t.status,
    c.name as category_name
FROM todos t
INNER JOIN categories c
    ON c.id = t.category_id
WHERE t.user_email = $1 
    AND status = TRUE 
ORDER BY date DESC
LIMIT $2
OFFSET $3
`

type ListDoneTodoParams struct {
	UserEmail string `json:"user_email"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type ListDoneTodoRow struct {
	ID           int32     `json:"id"`
	CategoryID   int32     `json:"category_id"`
	UserEmail    string    `json:"user_email"`
	Title        string    `json:"title"`
	Content      string    `json:"content"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	Date         time.Time `json:"date"`
	Color        string    `json:"color"`
	IsPriority   bool      `json:"is_priority"`
	Status       bool      `json:"status"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) ListDoneTodo(ctx context.Context, arg ListDoneTodoParams) ([]ListDoneTodoRow, error) {
	rows, err := q.db.QueryContext(ctx, listDoneTodo, arg.UserEmail, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDoneTodoRow{}
	for rows.Next() {
		var i ListDoneTodoRow
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.UserEmail,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Date,
			&i.Color,
			&i.IsPriority,
			&i.Status,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodayTodo = `-- name: ListTodayTodo :many
SELECT
    t.id, t.category_id, t.user_email, t.title, t.content, t.created_at, t.updated_at, t.date, t.color, t.is_priority, t.status,
    c.name as category_name
FROM todos t
INNER JOIN categories c
    ON c.id = t.category_id
WHERE t.user_email = $1 
    AND date <= now() 
    AND status = FALSE 
ORDER BY is_priority DESC
LIMIT $2
OFFSET $3
`

type ListTodayTodoParams struct {
	UserEmail string `json:"user_email"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type ListTodayTodoRow struct {
	ID           int32     `json:"id"`
	CategoryID   int32     `json:"category_id"`
	UserEmail    string    `json:"user_email"`
	Title        string    `json:"title"`
	Content      string    `json:"content"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	Date         time.Time `json:"date"`
	Color        string    `json:"color"`
	IsPriority   bool      `json:"is_priority"`
	Status       bool      `json:"status"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) ListTodayTodo(ctx context.Context, arg ListTodayTodoParams) ([]ListTodayTodoRow, error) {
	rows, err := q.db.QueryContext(ctx, listTodayTodo, arg.UserEmail, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTodayTodoRow{}
	for rows.Next() {
		var i ListTodayTodoRow
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.UserEmail,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Date,
			&i.Color,
			&i.IsPriority,
			&i.Status,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodoByUser = `-- name: ListTodoByUser :many
SELECT
    t.id, t.category_id, t.user_email, t.title, t.content, t.created_at, t.updated_at, t.date, t.color, t.is_priority, t.status,
    c.name as category_name
FROM todos t
INNER JOIN categories c
    ON c.id = t.category_id
WHERE t.user_email = $1 

ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type ListTodoByUserParams struct {
	UserEmail string `json:"user_email"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type ListTodoByUserRow struct {
	ID           int32     `json:"id"`
	CategoryID   int32     `json:"category_id"`
	UserEmail    string    `json:"user_email"`
	Title        string    `json:"title"`
	Content      string    `json:"content"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	Date         time.Time `json:"date"`
	Color        string    `json:"color"`
	IsPriority   bool      `json:"is_priority"`
	Status       bool      `json:"status"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) ListTodoByUser(ctx context.Context, arg ListTodoByUserParams) ([]ListTodoByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listTodoByUser, arg.UserEmail, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTodoByUserRow{}
	for rows.Next() {
		var i ListTodoByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.UserEmail,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Date,
			&i.Color,
			&i.IsPriority,
			&i.Status,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingTodo = `-- name: ListUpcomingTodo :many
SELECT
    t.id, t.category_id, t.user_email, t.title, t.content, t.created_at, t.updated_at, t.date, t.color, t.is_priority, t.status,
    c.name as category_name
FROM todos t
INNER JOIN categories c
    ON c.id = t.category_id
WHERE t.user_email = $1 
    AND date > now() 
    AND status = FALSE 
ORDER BY is_priority DESC, date ASC
LIMIT $2
OFFSET $3
`

type ListUpcomingTodoParams struct {
	UserEmail string `json:"user_email"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

type ListUpcomingTodoRow struct {
	ID           int32     `json:"id"`
	CategoryID   int32     `json:"category_id"`
	UserEmail    string    `json:"user_email"`
	Title        string    `json:"title"`
	Content      string    `json:"content"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	Date         time.Time `json:"date"`
	Color        string    `json:"color"`
	IsPriority   bool      `json:"is_priority"`
	Status       bool      `json:"status"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) ListUpcomingTodo(ctx context.Context, arg ListUpcomingTodoParams) ([]ListUpcomingTodoRow, error) {
	rows, err := q.db.QueryContext(ctx, listUpcomingTodo, arg.UserEmail, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUpcomingTodoRow{}
	for rows.Next() {
		var i ListUpcomingTodoRow
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.UserEmail,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Date,
			&i.Color,
			&i.IsPriority,
			&i.Status,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsCompleteTodo = `-- name: MarkAsCompleteTodo :one
UPDATE todos
SET status = true
WHERE id = $1
RETURNING id, category_id, title, content, created_at, updated_at, user_email, color, date, is_priority, status
`

func (q *Queries) MarkAsCompleteTodo(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, markAsCompleteTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserEmail,
		&i.Color,
		&i.Date,
		&i.IsPriority,
		&i.Status,
	)
	return i, err
}

const updateTodoByUser = `-- name: UpdateTodoByUser :one
UPDATE todos
SET category_id = $2, title = $3, content = $4, updated_at = now(), date = $5, color = $6, is_priority = $7
WHERE id = $1
RETURNING id, category_id, title, content, created_at, updated_at, user_email, color, date, is_priority, status
`

type UpdateTodoByUserParams struct {
	ID         int32     `json:"id"`
	CategoryID int32     `json:"category_id"`
	Title      string    `json:"title"`
	Content    string    `json:"content"`
	Date       time.Time `json:"date"`
	Color      string    `json:"color"`
	IsPriority bool      `json:"is_priority"`
}

func (q *Queries) UpdateTodoByUser(ctx context.Context, arg UpdateTodoByUserParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoByUser,
		arg.ID,
		arg.CategoryID,
		arg.Title,
		arg.Content,
		arg.Date,
		arg.Color,
		arg.IsPriority,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserEmail,
		&i.Color,
		&i.Date,
		&i.IsPriority,
		&i.Status,
	)
	return i, err
}
